{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_success","className","title","to","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0e53fc14.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({  \r\n  launch: { flight_number, mission_name, launch_success }\r\n}) {\r\n\r\n  return (\r\n    <div className=\"card card-body my-3 mx-2\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-7\">\r\n          <h4>Mission:  \r\n            <span \r\n              className={launch_success ? 'text-success' : 'text-danger'}\r\n              title={launch_success ? 'successful' : 'failed'}>\r\n               {' ' + mission_name}\r\n            </span>\r\n          </h4>\r\n        </div>\r\n        <div className=\"col-md-2 ml-auto\">\r\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n            Launch Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport LaunchItem from './LaunchItem';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Launches() {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.log(error); \r\n    return <p>Error happend</p>;\r\n  }\r\n\r\n  console.log(data.launches);\r\n\r\n  return <>\r\n  {\r\n    data.launches.map(launch => (\r\n      <LaunchItem key={launch.flight_number} launch={launch}/>\r\n    ))\r\n  }   \r\n  </>\r\n};\r\n\r\nexport default Launches; ","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\nquery Launch($flight_number: Int!) {\r\n  launch(flight_number: $flight_number) {\r\n    flight_number\r\n    mission_name\r\n    launch_year\r\n    launch_success\r\n    launch_date_local\r\n    rocket {\r\n      rocket_id\r\n      rocket_name\r\n      rocket_type\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport default function Launch(props) {\r\n  let { flight_number } = props.match.params;\r\n  flight_number = parseInt(flight_number);\r\n  \r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: {flight_number}  //__passing an object here! Watch it!\r\n  });\r\n  if(!flight_number) {\r\n    //__String request case\r\n    return(\r\n    <>\r\n    <h3>Oh jeez you can only request flights by it's numbers</h3>    \r\n    <hr />\r\n    <Link to=\"/\" className=\"btn btn-secondary\">\r\n      Back\r\n    </Link>\r\n    </>)\r\n  }\r\n\r\n  \r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) {\r\n    console.log(error); \r\n    return <p>Error happend</p>;\r\n  }\r\n\r\n\r\n  const {\r\n    mission_name,\r\n    launch_year,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type }\r\n  } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">\r\n        <span className=\"text-info\">Mission:</span> {mission_name}\r\n      </h1>\r\n      <h4 className=\"mb-3 text-info\">Launch Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">\r\n          Flight Number: {flight_number}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Launch Year: {launch_year}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Launch Successful:{' '}\r\n          <span\r\n            className=\"text-success\"\r\n          >\r\n            {launch_success ? 'Yes' : 'No'}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n\r\n      <h4 className=\"my-3 text-info\">Rocket Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n        <li className=\"list-group-item\">\r\n          Rocket Name: {rocket_name}\r\n        </li>\r\n        <li className=\"list-group-item\">\r\n          Rocket Type: {rocket_type}\r\n        </li>\r\n      </ul>\r\n      <hr />\r\n      <Link to=\"/\" className=\"btn btn-secondary\">\r\n        Back\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport './bootstrap.min.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nconst client = new ApolloClient({\n//  uri: 'http://localhost:4000/graphql',   //__Development path witout proxy attribute in package.json\n  uri: '/graphql',   //__Production path\n\n});\n\nfunction App() {\n  return (\n    \n  <ApolloProvider client={client}>\n    <Router>\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1 className=\"ml-2\">App that fetches spacex...</h1>\n        </div>\n\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />      \n      </div>\n    </Router>\n  </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}